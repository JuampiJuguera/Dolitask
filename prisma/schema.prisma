generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id  Int    @id @default(autoincrement())
  name String
  lastName String
  username String @unique
  email String @unique
  photo String @db.VarChar(255)
  taskTime Task_time[]
  userRole  User_roles[]
  userProject  User_projects[]
  refreshTokens RefreshToken[]
  password String
  enabled Boolean @default(true)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}


model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String
  user        Users    @relation(fields: [idUser], references: [id], onDelete: Cascade)
  idUser      Int
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User_roles {
  id Int @id @default(autoincrement())
  user  Users  @relation(fields: [idUser], references: [id])
  role  Roles  @relation(fields: [idRole], references: [id])
  idUser   Int
  idRole   Int
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Roles {
  id Int @id @default(autoincrement())
  name String
  description String
  userRole  User_roles[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model User_projects {
  id Int @id @default(autoincrement())
  user  Users  @relation(fields: [idUser], references: [id])
  project  Projects  @relation(fields: [idProject], references: [id])
  idUser   Int
  idProject  Int
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Projects {
  id Int @id @default(autoincrement())
  name String
  URL_Drive String
  userProject  User_projects[]
  projectDocuments  Project_documents[]
  task Tasks[]
  enabled Boolean @default(true)
  startDate DateTime
  endDate DateTime
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Project_documents {
  id Int @id @default(autoincrement())
  name String
  description String
  startDate DateTime
  endDate DateTime
  enabled Boolean @default(true)
  idProject  Int
  project Projects @relation(fields: [idProject], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Tasks {
  id Int @id @default(autoincrement())
  name String
  description String
  startDate DateTime
  endDate DateTime
  enabled Boolean @default(true)
  // relations
  idProject Int
  taskDocuments  Task_documents[]
  taskTime Task_time[]
  idType  Int @unique
  idPriority  Int @unique
  idStatus  Int @unique
  project  Projects  @relation(fields: [idProject], references: [id])
  taskType Task_types @relation(fields: [idType], references: [id])
  taskPriority Task_priorities @relation(fields: [idPriority], references: [id])
  taskStatus Task_statuses @relation(fields: [idStatus], references: [id])
  //
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Task_documents {
  id  Int @id @default(autoincrement())
  title  String
  document  String
  idTask  Int
  task Tasks @relation(fields: [idTask], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Task_priorities {
  id  Int @id @default(autoincrement())
  priority  String
  task Tasks?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Task_types {
  id  Int @id @default(autoincrement())
  type  String
  task Tasks?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Task_statuses {
  id Int @id @default(autoincrement())
  status  String
  task Tasks?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Task_time {
  // revisar ESTA nomas
  id Int @id @default(autoincrement())
  description String
  timeSpent DateTime // revisar como vamos a guardar el tiempo
  // relations
  idTask  Int
  idUser Int
  task Tasks @relation(fields: [idTask], references: [id])
  user Users @relation(fields: [idUser], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}